// Mocks generated by Mockito 5.4.4 from annotations
// in dart_fake_store_api_wrapper/test/container_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i12;

import 'package:dart_fake_store_api_wrapper/dart_fake_store_api_wrapper.dart'
    as _i5;
import 'package:dart_fake_store_api_wrapper/src/core/errors/failures.dart'
    as _i14;
import 'package:dart_fake_store_api_wrapper/src/core/network/api_client.dart'
    as _i11;
import 'package:dart_fake_store_api_wrapper/src/domain/repositories/cart_repository.dart'
    as _i8;
import 'package:dart_fake_store_api_wrapper/src/domain/repositories/product_repository.dart'
    as _i7;
import 'package:dart_fake_store_api_wrapper/src/domain/repositories/user_repository.dart'
    as _i9;
import 'package:dart_fake_store_api_wrapper/src/domain/use_cases/products.dart'
    as _i2;
import 'package:dart_fake_store_api_wrapper/src/domain/use_cases/users.dart'
    as _i3;
import 'package:dart_fake_store_api_wrapper/src/infrastructure/datasources/remote_data_source.dart'
    as _i13;
import 'package:dart_fake_store_api_wrapper/src/injection_container.dart'
    as _i10;
import 'package:dartz/dartz.dart' as _i6;
import 'package:http/http.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProducts_0 extends _i1.SmartFake implements _i2.Products {
  _FakeProducts_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUsers_1 extends _i1.SmartFake implements _i3.Users {
  _FakeUsers_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeClient_2 extends _i1.SmartFake implements _i4.Client {
  _FakeClient_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductEntity_3 extends _i1.SmartFake implements _i5.ProductEntity {
  _FakeProductEntity_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCartEntity_4 extends _i1.SmartFake implements _i5.CartEntity {
  _FakeCartEntity_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIdEntity_5 extends _i1.SmartFake implements _i5.IdEntity {
  _FakeIdEntity_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTokenEntity_6 extends _i1.SmartFake implements _i5.TokenEntity {
  _FakeTokenEntity_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserEntity_7 extends _i1.SmartFake implements _i5.UserEntity {
  _FakeUserEntity_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_8<L, R> extends _i1.SmartFake implements _i6.Either<L, R> {
  _FakeEither_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductsRepository_9 extends _i1.SmartFake
    implements _i7.ProductsRepository {
  _FakeProductsRepository_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCartRepository_10 extends _i1.SmartFake
    implements _i8.CartRepository {
  _FakeCartRepository_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserRepository_11 extends _i1.SmartFake
    implements _i9.UserRepository {
  _FakeUserRepository_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Container].
///
/// See the documentation for Mockito's code generation for more information.
class MockContainer extends _i1.Mock implements _i10.Container {
  MockContainer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Products get productUseCase => (super.noSuchMethod(
        Invocation.getter(#productUseCase),
        returnValue: _FakeProducts_0(
          this,
          Invocation.getter(#productUseCase),
        ),
      ) as _i2.Products);

  @override
  _i3.Users get userUseCase => (super.noSuchMethod(
        Invocation.getter(#userUseCase),
        returnValue: _FakeUsers_1(
          this,
          Invocation.getter(#userUseCase),
        ),
      ) as _i3.Users);

  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i11.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Client get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeClient_2(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i4.Client);

  @override
  _i12.Future<dynamic> get(String? endpoint) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [endpoint],
        ),
        returnValue: _i12.Future<dynamic>.value(),
      ) as _i12.Future<dynamic>);

  @override
  _i12.Future<dynamic> post(
    String? endpoint,
    dynamic body,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [
            endpoint,
            body,
          ],
        ),
        returnValue: _i12.Future<dynamic>.value(),
      ) as _i12.Future<dynamic>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i13.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<List<_i5.ProductEntity>> getProducts() => (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
        ),
        returnValue:
            _i12.Future<List<_i5.ProductEntity>>.value(<_i5.ProductEntity>[]),
      ) as _i12.Future<List<_i5.ProductEntity>>);

  @override
  _i12.Future<_i5.ProductEntity> getSingleProduct(int? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSingleProduct,
          [productId],
        ),
        returnValue: _i12.Future<_i5.ProductEntity>.value(_FakeProductEntity_3(
          this,
          Invocation.method(
            #getSingleProduct,
            [productId],
          ),
        )),
      ) as _i12.Future<_i5.ProductEntity>);

  @override
  _i12.Future<_i5.CartEntity> sendProductToCart(_i5.CartEntity? cart) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendProductToCart,
          [cart],
        ),
        returnValue: _i12.Future<_i5.CartEntity>.value(_FakeCartEntity_4(
          this,
          Invocation.method(
            #sendProductToCart,
            [cart],
          ),
        )),
      ) as _i12.Future<_i5.CartEntity>);

  @override
  _i12.Future<_i5.IdEntity> registerUser(_i5.UserEntity? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [user],
        ),
        returnValue: _i12.Future<_i5.IdEntity>.value(_FakeIdEntity_5(
          this,
          Invocation.method(
            #registerUser,
            [user],
          ),
        )),
      ) as _i12.Future<_i5.IdEntity>);

  @override
  _i12.Future<_i5.TokenEntity> signInUser(_i5.UserEntity? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInUser,
          [user],
        ),
        returnValue: _i12.Future<_i5.TokenEntity>.value(_FakeTokenEntity_6(
          this,
          Invocation.method(
            #signInUser,
            [user],
          ),
        )),
      ) as _i12.Future<_i5.TokenEntity>);

  @override
  _i12.Future<_i5.UserEntity> getInfoUser(String? idUser) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInfoUser,
          [idUser],
        ),
        returnValue: _i12.Future<_i5.UserEntity>.value(_FakeUserEntity_7(
          this,
          Invocation.method(
            #getInfoUser,
            [idUser],
          ),
        )),
      ) as _i12.Future<_i5.UserEntity>);

  @override
  _i12.Future<List<String>> getCategories() => (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
        ),
        returnValue: _i12.Future<List<String>>.value(<String>[]),
      ) as _i12.Future<List<String>>);
}

/// A class which mocks [ProductsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsRepository extends _i1.Mock
    implements _i7.ProductsRepository {
  MockProductsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i6.Either<_i14.Failure, List<_i5.ProductEntity>>>
      getProducts() => (super.noSuchMethod(
            Invocation.method(
              #getProducts,
              [],
            ),
            returnValue: _i12.Future<
                    _i6.Either<_i14.Failure, List<_i5.ProductEntity>>>.value(
                _FakeEither_8<_i14.Failure, List<_i5.ProductEntity>>(
              this,
              Invocation.method(
                #getProducts,
                [],
              ),
            )),
          ) as _i12.Future<_i6.Either<_i14.Failure, List<_i5.ProductEntity>>>);

  @override
  _i12.Future<_i6.Either<_i14.Failure, _i5.ProductEntity>> getSingleProduct(
          int? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSingleProduct,
          [productId],
        ),
        returnValue:
            _i12.Future<_i6.Either<_i14.Failure, _i5.ProductEntity>>.value(
                _FakeEither_8<_i14.Failure, _i5.ProductEntity>(
          this,
          Invocation.method(
            #getSingleProduct,
            [productId],
          ),
        )),
      ) as _i12.Future<_i6.Either<_i14.Failure, _i5.ProductEntity>>);

  @override
  _i12.Future<_i6.Either<_i14.Failure, List<String>>> getCategories() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
        ),
        returnValue: _i12.Future<_i6.Either<_i14.Failure, List<String>>>.value(
            _FakeEither_8<_i14.Failure, List<String>>(
          this,
          Invocation.method(
            #getCategories,
            [],
          ),
        )),
      ) as _i12.Future<_i6.Either<_i14.Failure, List<String>>>);
}

/// A class which mocks [CartRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartRepository extends _i1.Mock implements _i8.CartRepository {
  MockCartRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i6.Either<_i14.Failure, _i5.CartEntity>> sendProductToCart(
          _i5.CartEntity? cart) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendProductToCart,
          [cart],
        ),
        returnValue:
            _i12.Future<_i6.Either<_i14.Failure, _i5.CartEntity>>.value(
                _FakeEither_8<_i14.Failure, _i5.CartEntity>(
          this,
          Invocation.method(
            #sendProductToCart,
            [cart],
          ),
        )),
      ) as _i12.Future<_i6.Either<_i14.Failure, _i5.CartEntity>>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i9.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.Future<_i6.Either<_i14.Failure, _i5.IdEntity>> register(
          _i5.UserEntity? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [user],
        ),
        returnValue: _i12.Future<_i6.Either<_i14.Failure, _i5.IdEntity>>.value(
            _FakeEither_8<_i14.Failure, _i5.IdEntity>(
          this,
          Invocation.method(
            #register,
            [user],
          ),
        )),
      ) as _i12.Future<_i6.Either<_i14.Failure, _i5.IdEntity>>);

  @override
  _i12.Future<_i6.Either<_i14.Failure, _i5.TokenEntity>> signIn(
          _i5.UserEntity? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [user],
        ),
        returnValue:
            _i12.Future<_i6.Either<_i14.Failure, _i5.TokenEntity>>.value(
                _FakeEither_8<_i14.Failure, _i5.TokenEntity>(
          this,
          Invocation.method(
            #signIn,
            [user],
          ),
        )),
      ) as _i12.Future<_i6.Either<_i14.Failure, _i5.TokenEntity>>);

  @override
  _i12.Future<_i6.Either<_i14.Failure, _i5.UserEntity>> getInfo(
          String? idUser) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInfo,
          [idUser],
        ),
        returnValue:
            _i12.Future<_i6.Either<_i14.Failure, _i5.UserEntity>>.value(
                _FakeEither_8<_i14.Failure, _i5.UserEntity>(
          this,
          Invocation.method(
            #getInfo,
            [idUser],
          ),
        )),
      ) as _i12.Future<_i6.Either<_i14.Failure, _i5.UserEntity>>);
}

/// A class which mocks [Products].
///
/// See the documentation for Mockito's code generation for more information.
class MockProducts extends _i1.Mock implements _i2.Products {
  MockProducts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.ProductsRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductsRepository_9(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i7.ProductsRepository);

  @override
  _i8.CartRepository get cartRepository => (super.noSuchMethod(
        Invocation.getter(#cartRepository),
        returnValue: _FakeCartRepository_10(
          this,
          Invocation.getter(#cartRepository),
        ),
      ) as _i8.CartRepository);

  @override
  _i12.Future<_i6.Either<_i14.Failure, List<_i5.ProductEntity>>>
      callProducts() => (super.noSuchMethod(
            Invocation.method(
              #callProducts,
              [],
            ),
            returnValue: _i12.Future<
                    _i6.Either<_i14.Failure, List<_i5.ProductEntity>>>.value(
                _FakeEither_8<_i14.Failure, List<_i5.ProductEntity>>(
              this,
              Invocation.method(
                #callProducts,
                [],
              ),
            )),
          ) as _i12.Future<_i6.Either<_i14.Failure, List<_i5.ProductEntity>>>);

  @override
  _i12.Future<_i6.Either<_i14.Failure, _i5.ProductEntity>> callSingleProduct(
          int? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #callSingleProduct,
          [productId],
        ),
        returnValue:
            _i12.Future<_i6.Either<_i14.Failure, _i5.ProductEntity>>.value(
                _FakeEither_8<_i14.Failure, _i5.ProductEntity>(
          this,
          Invocation.method(
            #callSingleProduct,
            [productId],
          ),
        )),
      ) as _i12.Future<_i6.Either<_i14.Failure, _i5.ProductEntity>>);

  @override
  _i12.Future<_i6.Either<_i14.Failure, _i5.CartEntity>> callSendProduct(
          _i5.CartEntity? cart) =>
      (super.noSuchMethod(
        Invocation.method(
          #callSendProduct,
          [cart],
        ),
        returnValue:
            _i12.Future<_i6.Either<_i14.Failure, _i5.CartEntity>>.value(
                _FakeEither_8<_i14.Failure, _i5.CartEntity>(
          this,
          Invocation.method(
            #callSendProduct,
            [cart],
          ),
        )),
      ) as _i12.Future<_i6.Either<_i14.Failure, _i5.CartEntity>>);

  @override
  _i12.Future<_i6.Either<_i14.Failure, List<String>>> callGetCategories() =>
      (super.noSuchMethod(
        Invocation.method(
          #callGetCategories,
          [],
        ),
        returnValue: _i12.Future<_i6.Either<_i14.Failure, List<String>>>.value(
            _FakeEither_8<_i14.Failure, List<String>>(
          this,
          Invocation.method(
            #callGetCategories,
            [],
          ),
        )),
      ) as _i12.Future<_i6.Either<_i14.Failure, List<String>>>);
}

/// A class which mocks [Users].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsers extends _i1.Mock implements _i3.Users {
  MockUsers() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_11(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i9.UserRepository);

  @override
  _i12.Future<_i6.Either<_i14.Failure, _i5.IdEntity>> callRegister(
          _i5.UserEntity? userData) =>
      (super.noSuchMethod(
        Invocation.method(
          #callRegister,
          [userData],
        ),
        returnValue: _i12.Future<_i6.Either<_i14.Failure, _i5.IdEntity>>.value(
            _FakeEither_8<_i14.Failure, _i5.IdEntity>(
          this,
          Invocation.method(
            #callRegister,
            [userData],
          ),
        )),
      ) as _i12.Future<_i6.Either<_i14.Failure, _i5.IdEntity>>);

  @override
  _i12.Future<_i6.Either<_i14.Failure, _i5.TokenEntity>> callSignIn(
          _i5.UserEntity? userData) =>
      (super.noSuchMethod(
        Invocation.method(
          #callSignIn,
          [userData],
        ),
        returnValue:
            _i12.Future<_i6.Either<_i14.Failure, _i5.TokenEntity>>.value(
                _FakeEither_8<_i14.Failure, _i5.TokenEntity>(
          this,
          Invocation.method(
            #callSignIn,
            [userData],
          ),
        )),
      ) as _i12.Future<_i6.Either<_i14.Failure, _i5.TokenEntity>>);

  @override
  _i12.Future<_i6.Either<_i14.Failure, _i5.UserEntity>> callInfo(
          String? idUser) =>
      (super.noSuchMethod(
        Invocation.method(
          #callInfo,
          [idUser],
        ),
        returnValue:
            _i12.Future<_i6.Either<_i14.Failure, _i5.UserEntity>>.value(
                _FakeEither_8<_i14.Failure, _i5.UserEntity>(
          this,
          Invocation.method(
            #callInfo,
            [idUser],
          ),
        )),
      ) as _i12.Future<_i6.Either<_i14.Failure, _i5.UserEntity>>);
}
