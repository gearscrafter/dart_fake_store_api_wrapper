// Mocks generated by Mockito 5.4.4 from annotations
// in dart_fake_store_api_wrapper/test/application/shopping_cart_application_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dart_fake_store_api_wrapper/src/core/errors/failures.dart'
    as _i8;
import 'package:dart_fake_store_api_wrapper/src/domain/entities/cart_entity.dart'
    as _i10;
import 'package:dart_fake_store_api_wrapper/src/domain/entities/product_entity.dart'
    as _i9;
import 'package:dart_fake_store_api_wrapper/src/domain/entities/user_entity.dart'
    as _i12;
import 'package:dart_fake_store_api_wrapper/src/domain/repositories/cart_repository.dart'
    as _i3;
import 'package:dart_fake_store_api_wrapper/src/domain/repositories/product_repository.dart'
    as _i2;
import 'package:dart_fake_store_api_wrapper/src/domain/repositories/user_repository.dart'
    as _i5;
import 'package:dart_fake_store_api_wrapper/src/domain/use_cases/products.dart'
    as _i6;
import 'package:dart_fake_store_api_wrapper/src/domain/use_cases/users.dart'
    as _i11;
import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductsRepository_0 extends _i1.SmartFake
    implements _i2.ProductsRepository {
  _FakeProductsRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCartRepository_1 extends _i1.SmartFake
    implements _i3.CartRepository {
  _FakeCartRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserRepository_3 extends _i1.SmartFake
    implements _i5.UserRepository {
  _FakeUserRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Products].
///
/// See the documentation for Mockito's code generation for more information.
class MockProducts extends _i1.Mock implements _i6.Products {
  MockProducts() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductsRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductsRepository_0(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i2.ProductsRepository);

  @override
  _i3.CartRepository get cartRepository => (super.noSuchMethod(
        Invocation.getter(#cartRepository),
        returnValue: _FakeCartRepository_1(
          this,
          Invocation.getter(#cartRepository),
        ),
      ) as _i3.CartRepository);

  @override
  _i7.Future<_i4.Either<_i8.Failure, List<_i9.ProductEntity>>> callProducts() =>
      (super.noSuchMethod(
        Invocation.method(
          #callProducts,
          [],
        ),
        returnValue:
            _i7.Future<_i4.Either<_i8.Failure, List<_i9.ProductEntity>>>.value(
                _FakeEither_2<_i8.Failure, List<_i9.ProductEntity>>(
          this,
          Invocation.method(
            #callProducts,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i8.Failure, List<_i9.ProductEntity>>>);

  @override
  _i7.Future<_i4.Either<_i8.Failure, _i9.ProductEntity>> callSingleProduct(
          int? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #callSingleProduct,
          [productId],
        ),
        returnValue:
            _i7.Future<_i4.Either<_i8.Failure, _i9.ProductEntity>>.value(
                _FakeEither_2<_i8.Failure, _i9.ProductEntity>(
          this,
          Invocation.method(
            #callSingleProduct,
            [productId],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i8.Failure, _i9.ProductEntity>>);

  @override
  _i7.Future<_i4.Either<_i8.Failure, _i10.CartEntity>> callSendProduct(
          _i10.CartEntity? cart) =>
      (super.noSuchMethod(
        Invocation.method(
          #callSendProduct,
          [cart],
        ),
        returnValue: _i7.Future<_i4.Either<_i8.Failure, _i10.CartEntity>>.value(
            _FakeEither_2<_i8.Failure, _i10.CartEntity>(
          this,
          Invocation.method(
            #callSendProduct,
            [cart],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i8.Failure, _i10.CartEntity>>);

  @override
  _i7.Future<_i4.Either<_i8.Failure, List<String>>> callGetCategories() =>
      (super.noSuchMethod(
        Invocation.method(
          #callGetCategories,
          [],
        ),
        returnValue: _i7.Future<_i4.Either<_i8.Failure, List<String>>>.value(
            _FakeEither_2<_i8.Failure, List<String>>(
          this,
          Invocation.method(
            #callGetCategories,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i8.Failure, List<String>>>);
}

/// A class which mocks [Users].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsers extends _i1.Mock implements _i11.Users {
  MockUsers() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.UserRepository get userRepository => (super.noSuchMethod(
        Invocation.getter(#userRepository),
        returnValue: _FakeUserRepository_3(
          this,
          Invocation.getter(#userRepository),
        ),
      ) as _i5.UserRepository);

  @override
  _i7.Future<_i4.Either<_i8.Failure, _i12.IdEntity>> callRegister(
          _i12.UserEntity? userData) =>
      (super.noSuchMethod(
        Invocation.method(
          #callRegister,
          [userData],
        ),
        returnValue: _i7.Future<_i4.Either<_i8.Failure, _i12.IdEntity>>.value(
            _FakeEither_2<_i8.Failure, _i12.IdEntity>(
          this,
          Invocation.method(
            #callRegister,
            [userData],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i8.Failure, _i12.IdEntity>>);

  @override
  _i7.Future<_i4.Either<_i8.Failure, _i12.TokenEntity>> callSignIn(
          _i12.UserEntity? userData) =>
      (super.noSuchMethod(
        Invocation.method(
          #callSignIn,
          [userData],
        ),
        returnValue:
            _i7.Future<_i4.Either<_i8.Failure, _i12.TokenEntity>>.value(
                _FakeEither_2<_i8.Failure, _i12.TokenEntity>(
          this,
          Invocation.method(
            #callSignIn,
            [userData],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i8.Failure, _i12.TokenEntity>>);

  @override
  _i7.Future<_i4.Either<_i8.Failure, _i12.UserEntity>> callInfo(
          String? idUser) =>
      (super.noSuchMethod(
        Invocation.method(
          #callInfo,
          [idUser],
        ),
        returnValue: _i7.Future<_i4.Either<_i8.Failure, _i12.UserEntity>>.value(
            _FakeEither_2<_i8.Failure, _i12.UserEntity>(
          this,
          Invocation.method(
            #callInfo,
            [idUser],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i8.Failure, _i12.UserEntity>>);
}
